(ns chromex.app.easy-unlock-private
  "chrome.easyUnlockPrivate API that provides hooks to Chrome to
   be used by Easy Unlock component app.

     * available since Chrome 38"

  (:refer-clojure :only [defmacro defn apply declare meta let partial])
  (:require [chromex.wrapgen :refer [gen-wrap-helper]]
            [chromex.callgen :refer [gen-call-helper gen-tap-all-events-call]]))

(declare api-table)
(declare gen-call)

; -- functions --------------------------------------------------------------------------------------------------------------

(defmacro get-strings
  "Gets localized strings required to render the API.

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [strings] where:

     |strings| - ?

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([] (gen-call :function ::get-strings &form)))

(defmacro generate-ec-p256-key-pair
  "Generates a ECDSA key pair for P256 curve. Public key will be in format recognized by secure wire transport protocol used
   by Easy Unlock app. Otherwise, the exact format for both key should should be considered obfuscated to the app. The app
   should not use them directly, but through this API.

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [public-key private-key] where:

     |public-key| - ?
     |private-key| - ?

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([] (gen-call :function ::generate-ec-p256-key-pair &form)))

(defmacro perform-ecdh-key-agreement
  "Given a private key and a public ECDSA key from different asymetric key pairs, it generates a symetric encryption key using
   EC Diffie-Hellman scheme.

     |private-key| - A private key generated by the app using     |generateEcP256KeyPair|.
     |public-key| - A public key that should be in the same format as the     public key generated by
                    |generateEcP256KeyPair|. Generally not the     one paired with |private_key|.

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [data] where:

     |data| - ?

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([private-key public-key] (gen-call :function ::perform-ecdh-key-agreement &form private-key public-key)))

(defmacro create-secure-message
  "Creates a secure, signed message in format used by Easy Unlock app to establish secure communication channel over unsecure
   connection.

     |payload| - The payload the create message should carry.
     |key| - The key used to sign the message content. If encryption algorithm     is set in |options| the same key will be
             used to encrypt the message.
     |options| - Additional (optional) parameters used to create the message.

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [data] where:

     |data| - ?

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([payload key options] (gen-call :function ::create-secure-message &form payload key options)))

(defmacro unwrap-secure-message
  "Authenticates and, if needed, decrypts a secure message. The message is in the same format as the one created by
   |createSecureMessage|.

     |secure-message| - The message to be unwrapped.
     |key| - Key to be used to authenticate the message sender. If encryption     algorithm is set in |options|, the same
             key will be used to decrypt     the message.
     |options| - Additional (optional) parameters used to unwrap the message.

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [data] where:

     |data| - ?

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([secure-message key options] (gen-call :function ::unwrap-secure-message &form secure-message key options)))

(defmacro get-permit-access
  "Gets the permit record for the local device.

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [permit-access] where:

     |permit-access| - ?

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([] (gen-call :function ::get-permit-access &form)))

(defmacro clear-permit-access
  "Clears the permit record for the local device.

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [].

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([] (gen-call :function ::clear-permit-access &form)))

(defmacro set-remote-devices
  "Saves the remote device list.

     |devices| - The list of remote devices to be saved.

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [].

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([devices] (gen-call :function ::set-remote-devices &form devices)))

(defmacro get-remote-devices
  "Gets the remote device list.

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [devices] where:

     |devices| - ?

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([] (gen-call :function ::get-remote-devices &form)))

(defmacro get-user-info
  "Retrieves information about the user associated with the Easy unlock service.

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [users] where:

     |users| - ?

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([] (gen-call :function ::get-user-info &form)))

(defmacro show-error-bubble
  "Shows an error bubble with the given |message|, anchored to an edge of the given |anchorRect| -- typically the right edge,
   but possibly a different edge if there is not space for the bubble to the right of the anchor rectangle. If the
   |link_range| is non-empty, renders the text within the |message| that is contained in the |link_range| as a link with the
   given |link_target| URL.

     |message| - ?
     |link-range| - ?
     |link-target| - ?
     |anchor-rect| - ?"
  ([message link-range link-target anchor-rect] (gen-call :function ::show-error-bubble &form message link-range link-target anchor-rect)))

(defmacro hide-error-bubble
  "Hides the currently visible error bubble, if there is one."
  ([] (gen-call :function ::hide-error-bubble &form)))

(defmacro find-setup-connection
  "Finds and connects the remote BLE device that is advertising: |setupServiceUUID|. Returns when a connection is found or
   |timeOut| seconds have elapsed.

     |setup-service-uuid| - ?
     |time-out| - ?

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [connection-id device-address] where:

     |connection-id| - The identifier of the connection found. To be used in future calls refering to this connection.
     |device-address| - The Bluetooth address of the remote device.

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([setup-service-uuid time-out] (gen-call :function ::find-setup-connection &form setup-service-uuid time-out)))

(defmacro setup-connection-disconnect
  "Disconnects the connection with |connectionId|.

     |connection-id| - ?

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [].

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([connection-id] (gen-call :function ::setup-connection-disconnect &form connection-id)))

(defmacro setup-connection-send
  "Sends |data| through the connection with |connnectionId|.

     |connection-id| - ?
     |data| - ?

   This function returns a core.async channel of type `promise-chan` which eventually receives a result value.
   Signature of the result value put on the channel is [].

   In case of an error the channel closes without receiving any value and relevant error object can be obtained via
   chromex.error/get-last-error."
  ([connection-id data] (gen-call :function ::setup-connection-send &form connection-id data)))

; -- events -----------------------------------------------------------------------------------------------------------------
;
; docs: https://github.com/binaryage/chromex/#tapping-events

(defmacro tap-on-connection-status-changed-events
  "Event fired when |connectionId| change status.

   Events will be put on the |channel| with signature [::on-connection-status-changed [connection-id old-status new-status]]
   where:

     |connection-id| - ?
     |old-status| - ?
     |new-status| - ?

   Note: |args| will be passed as additional parameters into Chrome event's .addListener call."
  ([channel & args] (apply gen-call :event ::on-connection-status-changed &form channel args)))

(defmacro tap-on-data-received-events
  "Event fired when |connectionId| receives |data|.

   Events will be put on the |channel| with signature [::on-data-received [connection-id data]] where:

     |connection-id| - ?
     |data| - ?

   Note: |args| will be passed as additional parameters into Chrome event's .addListener call."
  ([channel & args] (apply gen-call :event ::on-data-received &form channel args)))

(defmacro tap-on-send-completed-events
  "Event fired when |connectionId| sends |data|. |success| is true if the send operation was successful.

   Events will be put on the |channel| with signature [::on-send-completed [connection-id data success]] where:

     |connection-id| - ?
     |data| - ?
     |success| - ?

   Note: |args| will be passed as additional parameters into Chrome event's .addListener call."
  ([channel & args] (apply gen-call :event ::on-send-completed &form channel args)))

; -- convenience ------------------------------------------------------------------------------------------------------------

(defmacro tap-all-events
  "Taps all valid non-deprecated events in chromex.app.easy-unlock-private namespace."
  [chan]
  (gen-tap-all-events-call api-table (meta &form) chan))

; ---------------------------------------------------------------------------------------------------------------------------
; -- API TABLE --------------------------------------------------------------------------------------------------------------
; ---------------------------------------------------------------------------------------------------------------------------

(def api-table
  {:namespace "chrome.easyUnlockPrivate",
   :since "38",
   :functions
   [{:id ::get-strings,
     :name "getStrings",
     :callback? true,
     :params [{:name "callback", :type :callback, :callback {:params [{:name "strings", :type "object"}]}}]}
    {:id ::generate-ec-p256-key-pair,
     :name "generateEcP256KeyPair",
     :callback? true,
     :params
     [{:name "callback",
       :type :callback,
       :callback
       {:params
        [{:name "public-key", :optional? true, :type "ArrayBuffer"}
         {:name "private-key", :optional? true, :type "ArrayBuffer"}]}}]}
    {:id ::perform-ecdh-key-agreement,
     :name "performECDHKeyAgreement",
     :callback? true,
     :params
     [{:name "private-key", :type "ArrayBuffer"}
      {:name "public-key", :type "ArrayBuffer"}
      {:name "callback", :type :callback, :callback {:params [{:name "data", :optional? true, :type "ArrayBuffer"}]}}]}
    {:id ::create-secure-message,
     :name "createSecureMessage",
     :callback? true,
     :params
     [{:name "payload", :type "ArrayBuffer"}
      {:name "key", :type "ArrayBuffer"}
      {:name "options", :type "object"}
      {:name "callback", :type :callback, :callback {:params [{:name "data", :optional? true, :type "ArrayBuffer"}]}}]}
    {:id ::unwrap-secure-message,
     :name "unwrapSecureMessage",
     :callback? true,
     :params
     [{:name "secure-message", :type "ArrayBuffer"}
      {:name "key", :type "ArrayBuffer"}
      {:name "options", :type "object"}
      {:name "callback", :type :callback, :callback {:params [{:name "data", :optional? true, :type "ArrayBuffer"}]}}]}
    {:id ::get-permit-access,
     :name "getPermitAccess",
     :callback? true,
     :params
     [{:name "callback",
       :type :callback,
       :callback {:params [{:name "permit-access", :optional? true, :type "easyUnlockPrivate.PermitRecord"}]}}]}
    {:id ::clear-permit-access,
     :name "clearPermitAccess",
     :callback? true,
     :params [{:name "callback", :optional? true, :type :callback}]}
    {:id ::set-remote-devices,
     :name "setRemoteDevices",
     :callback? true,
     :params
     [{:name "devices", :type "[array-of-easyUnlockPrivate.Devices]"}
      {:name "callback", :optional? true, :type :callback}]}
    {:id ::get-remote-devices,
     :name "getRemoteDevices",
     :callback? true,
     :params
     [{:name "callback",
       :type :callback,
       :callback {:params [{:name "devices", :type "[array-of-easyUnlockPrivate.Devices]"}]}}]}
    {:id ::get-user-info,
     :name "getUserInfo",
     :callback? true,
     :params [{:name "callback", :type :callback, :callback {:params [{:name "users", :type "[array-of-objects]"}]}}]}
    {:id ::show-error-bubble,
     :name "showErrorBubble",
     :since "42",
     :params
     [{:name "message", :type "string"}
      {:name "link-range", :type "object"}
      {:name "link-target", :type "string"}
      {:name "anchor-rect", :type "object"}]}
    {:id ::hide-error-bubble, :name "hideErrorBubble", :since "43"}
    {:id ::find-setup-connection,
     :name "findSetupConnection",
     :since "47",
     :callback? true,
     :params
     [{:name "setup-service-uuid", :type "string"}
      {:name "time-out", :type "integer"}
      {:name "callback",
       :type :callback,
       :callback {:params [{:name "connection-id", :type "integer"} {:name "device-address", :type "string"}]}}]}
    {:id ::setup-connection-disconnect,
     :name "setupConnectionDisconnect",
     :since "47",
     :callback? true,
     :params [{:name "connection-id", :type "integer"} {:name "callback", :optional? true, :type :callback}]}
    {:id ::setup-connection-send,
     :name "setupConnectionSend",
     :since "47",
     :callback? true,
     :params
     [{:name "connection-id", :type "integer"}
      {:name "data", :type "ArrayBuffer"}
      {:name "callback", :optional? true, :type :callback}]}],
   :events
   [{:id ::on-connection-status-changed,
     :name "onConnectionStatusChanged",
     :since "47",
     :params
     [{:name "connection-id", :type "integer"}
      {:name "old-status", :type "easyUnlockPrivate.ConnectionStatus"}
      {:name "new-status", :type "easyUnlockPrivate.ConnectionStatus"}]}
    {:id ::on-data-received,
     :name "onDataReceived",
     :since "47",
     :params [{:name "connection-id", :type "integer"} {:name "data", :type "ArrayBuffer"}]}
    {:id ::on-send-completed,
     :name "onSendCompleted",
     :since "47",
     :params
     [{:name "connection-id", :type "integer"}
      {:name "data", :type "ArrayBuffer"}
      {:name "success", :type "boolean"}]}]})

; -- helpers ----------------------------------------------------------------------------------------------------------------

; code generation for native API wrapper
(defmacro gen-wrap [kind item-id config & args]
  (apply gen-wrap-helper api-table kind item-id config args))

; code generation for API call-site
(def gen-call (partial gen-call-helper api-table))